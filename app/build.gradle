import java.nio.file.Paths

plugins {
    id('apk-conventions')
    alias(libs.plugins.gradle.versions)
}

android {
    namespace = 'com.mirfatif.permissionmanagerx'

    defaultConfig {
        applicationId namespace

        versionCode libs.versions.app.code.get().toInteger()
        versionName libs.versions.app.name.get()

        // Flavor-independent and BuildType-independent BuildConfig.APPLICATION_ID
        buildConfigField 'String', 'APP_ID', '"' + namespace + '"'

        versionNameSuffix '-foss'
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
        }
    }

    applicationVariants.configureEach { variant ->
        def mf = variant.mergedFlavor
        String lfp = variant.applicationId + '.LogFileProvider'
        mf.addManifestPlaceholders(LOG_FILE_PROVIDER: lfp)
        variant.buildConfigField 'String', 'LOG_FILE_PROVIDER', '"' + lfp + '"'
    }

    packagingOptions {
        jniLibs {
            // Due to android:extractNativeLibs set to 'true' in AndroidManifest.
            useLegacyPackaging = true
        }

        // Exclude large files.
        resources.excludes.add('org/bouncycastle/pqc/crypto/picnic/lowmcL1.bin.properties')
        resources.excludes.add('org/bouncycastle/pqc/crypto/picnic/lowmcL3.bin.properties')
        resources.excludes.add('org/bouncycastle/pqc/crypto/picnic/lowmcL5.bin.properties')
    }
}

configurations {
    configureEach {
        // To avoid duplicate class version conflict.
        exclude group: 'androidx.lifecycle', module: 'lifecycle-viewmodel-ktx'
    }
}

dependencies {
    implementation project(path: ':priv_library')
    runtimeOnly project(path: ':priv_daemon')

    implementation libs.libadb.android
    // To generate X509Certificate
    implementation libs.sun.security.android
    // For conscrypt
    implementation libs.hiddenapibypass

    implementation libs.androidx.appcompat
    implementation libs.androidx.recyclerview
    implementation libs.androidx.swiperefreshlayout
    implementation libs.androidx.preference
    implementation libs.androidx.browser
    implementation libs.androidx.room.runtime
    implementation libs.androidx.security.crypto
    implementation libs.androidx.webkit
    annotationProcessor libs.androidx.room.compiler

    // For SnackBar and NavigationView. Also includes CoordinatorLayout
    implementation libs.material

    // To handle hyperlink onClick in TextView
    implementation libs.better.link.movement.method

    // To use Iterables for splitting Collections
    implementation(libs.guava)

    // Let's behave responsibly
    debugImplementation libs.leakcanary.android
}

tasks.register('buildNative', Exec) {
    def props = new Properties()
    props.load(new FileInputStream(new File(rootDir, "local.properties")))
    def ndkDir = new File(props.get("sdk.dir").toString(), "ndk/28.2.13676358").absolutePath
    def nativeDir = rootDir.absolutePath + "/native"

    environment 'ANDROID_NDK', ndkDir
    workingDir nativeDir
    commandLine './build_native.sh'

    doLast {
        if (executionResult.get().exitValue != 0) {
            throw new GradleException('buildNative failed')
        }
    }
}

afterEvaluate {
    for (String build : new String[]{'Debug', 'Release'}) {
        tasks.named('merge' + build + 'JniLibFolders').configure {
            dependsOn('buildNative')
            mustRunAfter('buildNative')
        }
    }
}

clean.doLast {
    Paths.get(projectDir.absolutePath, 'src/main/jniLibs').deleteDir()
}

preBuild.doFirst {
    // Re-merge the assets and jniLibs source sets.
    for (String dir in new String[]{'assets', 'merged_jni_libs'}) {
        Paths.get(projectDir.absolutePath, 'build/intermediates/' + dir).deleteDir()
    }
}
